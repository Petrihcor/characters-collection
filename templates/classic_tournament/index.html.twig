{% extends 'base.html.twig' %}

{% block title %}{{ tournament.name }}{% endblock %}

{% block body %}
    <h1>{{ tournament.name }}</h1>
    <div class="container">
        <p>–°—Ç–∞—Ç—ã</p>
        <ul>
            {% for stat in tournament.stats %}
            <li>{{ stat }}</li>
            {% endfor %}
        </ul>

    <!-- –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—É—Ä–Ω–∏—Ä–∞ -->

        <h2>Current Bracket</h2>
        {% set sorted_bracket = bracket|keys|sort|reverse %} {# –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ #}

        {% for level in sorted_bracket %}
            <h3>Level {{ level }}</h3>
            <div class="level" id="level-{{ level }}">
                <div class="players character-grid">
                    {% for player in bracket[level] %}
                        <div class="character-item">
                            <div class="character-card" data-id="{{ player.getid()  }}" style="background-image: url('{{ asset('images/' ~ player.image) }}');">
                                <div class="character-info">
                                    <h3 class="character-name">{{ player.name }}</h3>
{#                                    <p class="character-stat">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {{ player.intelligence }}</p>#}
{#                                    <p class="character-stat">–°–∏–ª–∞: {{ player.strength }}</p>#}
{#                                    <p class="character-stat">–õ–æ–≤–∫–æ—Å—Ç—å: {{ player.agility }}</p>#}
{#                                    <p class="character-stat">–û—Å–æ–±—ã–µ —É–º–µ–Ω–∏—è: {{ player.specialPowers }}</p>#}
{#                                    <p class="character-stat">–ë–æ–π—Ü–æ–≤—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏: {{ player.fightingSkills }}</p>#}
                                </div>
                            </div>
                </div>
                    {% endfor %}
                </div>
            </div>
        {% endfor %}
    </div>

{#        <form action="{{ path('choose_participans', {id: tournament.id}) }}" method="post">#}
{#            <button type="submit">–ü–æ–¥–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤</button>#}
{#        </form>#}
    <!-- –ö–Ω–æ–ø–∫–∞ –≤—ã–∑–æ–≤–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –±–æ—è -->

    {% if bracket is empty %}
        <form action="{{ path('stop_tournament', {id: id}) }}" method="post">
            <button type="submit" class="reset-button">–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä</button>
        </form>
    {% else %}
        <button id="openFightModal">–ü–æ–¥–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤</button>
    {% endif %}
    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –±–æ—è -->
    <div id="fightModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>

            <p id="levelDisplay">–£—Ä–æ–≤–µ–Ω—å: </p>
            {% for stat in tournament.stats %}
                <li>{{ stat }}</li>
            {% endfor %}
            <div id="fightersContainer">

                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤...</p>
            </div>
            <button id="startFight">–ù–∞—á–∞—Ç—å –±–æ–π</button>
        </div>
    </div>
    <!-- –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ -->
{#    <form action="{{ path('tournament_reset', {id: id}) }}" method="post">#}
{#        <button type="submit" class="reset-button">–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä</button>#}
{#    </form>#}

    <!-- –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Å—Ç–∞ -->
    <div class="places">
        <h2>Final Places</h2>
        <table>
            <thead>
            <tr>
                <th>–ú–µ—Å—Ç–æ</th>
                <th>–ò–≥—Ä–æ–∫</th>
            </tr>
            </thead>
            <tbody>
            {% for placeData in places|sort((a, b) => a.place <=> b.place) %}
                <tr>
                    <td>{{ placeData.place }}</td>
                    <td>{{ placeData.character.name }}</td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    </div>
    <script>
        //–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ app.js
        document.addEventListener("DOMContentLoaded", function () {
            const modal = document.getElementById("fightModal");
            const openModalBtn = document.getElementById("openFightModal");
            const closeModalBtn = document.querySelector(".close");
            const startFightBtn = document.getElementById("startFight");
            const fightersContainer = document.getElementById("fightersContainer");
            const levelDisplay = document.getElementById("levelDisplay"); // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è
            const winnerId = localStorage.getItem('winnerId');
            const loserId = localStorage.getItem('loserId');

            if (winnerId && loserId) {
                updateBracketColors(winnerId, loserId);
            }

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –±–æ–π—Ü–æ–≤
            openModalBtn.addEventListener("click", function () {
                modal.style.display = "block";
                fetch("{{ path('choose_participans', {id: tournament.id}) }}", { method: "POST" })
                    .then(response => response.json())
                    .then(data => {
                        fightersContainer.innerHTML = ""; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –±–æ–π—Ü–∞–º–∏

                        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –º–æ–¥–∞–ª–∫–µ
                        levelDisplay.innerText = `–£—Ä–æ–≤–µ–Ω—å: ${data.level}`;

                        data.fighters.forEach(fighter => {
                            let fighterHtml = `
                        <div class="character-card" style="background-image: url('/images/${fighter.image}');">
                            <div class="character-info">
                                <h3 class="character-name">${fighter.name}</h3>
                                ${/*
            Object.entries(fighter)
            .filter(([key]) => key !== "id" && key !== "name" && key !== "image")
            .map(([key, value]) => `<p class="character-stat">${key.charAt(0).toUpperCase() + key.slice(1)}: ${value}</p>`)
            .join("")
        */""}
                            </div>
                            <input type="hidden" name="fighters[]" value="${fighter.id}">
                        </div>
                    `;

                            fightersContainer.innerHTML += fighterHtml;
                        });

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º level –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã
                        window.currentLevel = data.level;
                    });
            });

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
            closeModalBtn.addEventListener("click", function () {
                modal.style.display = "none";
            });

            startFightBtn.addEventListener("click", function (event) {
                event.preventDefault();

                const formData = new FormData();
                document.querySelectorAll('input[name="fighters[]"]').forEach(input => {
                    formData.append("fighters[]", input.value);
                });
                formData.append("level", window.currentLevel);

                fetch("{{ path('fight', {id: tournament.id}) }}", {
                    method: "POST",
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.loser) {
                            localStorage.setItem('loserId', data.loser.id);
                        }
                        if (data.winner) {
                            localStorage.setItem('winnerId', data.winner.id);
                            fightersContainer.innerHTML = `
                        <h3>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${data.winner.name} üèÜ</h3>
                        <img src="/images/${data.winner.image}" alt="${data.winner.name}" style="width:150px; height:150px; border-radius:50%;">
                    `;
                        }

                        setTimeout(() => {
                            modal.style.display = "none";
                            location.reload();
                        }, 3000);
                    });
            });
            function updateBracketColors(winnerId, loserId) {
                setTimeout(() => {
                    document.querySelectorAll(".character-card").forEach((item) => { // –ë—ã–ª .bracket-item, –∏—Å–ø—Ä–∞–≤–∏–ª –Ω–∞ .player
                        const fighterId = item.getAttribute("data-id");

                        if (fighterId == winnerId) {
                            item.classList.add("winner-highlight");
                        } else if (fighterId == loserId) {
                            item.classList.add("loser-highlight");
                        }
                    });
                }, 300);
            }
        });

    </script>
{% endblock %}
